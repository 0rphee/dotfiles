theme = "current-theme"

[editor]
line-number = "relative"
idle-timeout = 30
completion-trigger-len = 1
scrolloff = 5  # default 5
color-modes = true
cursorline = true
cursorcolumn = true
bufferline = "always"
rulers = [80]
popup-border = "popup"

[editor.statusline]
left = ["mode", "diagnostics", "spinner", "separator", "version-control"]
center = ["file-name", "file-modification-indicator"]
right = ["selections", "position", "position-percentage", "file-encoding", "file-type"]

[editor.lsp]
display-messages = true
display-inlay-hints = true
goto-reference-include-declaration = false

[editor.cursor-shape]
insert = "bar"
normal = "block"
# select = "underline"

[editor.file-picker]
hidden = false      # enables ignoring hidden files
git-ignore = true   # don't show up in file picker when hidden=true 
ignore = true       # don't show up in file picker when hidden=true
max-depth = 10
#  in order to ignore specific files/directories in a proyect,
#  create a .ignore files with paths

[editor.whitespace]
render = "all"

[editor.indent-guides]
render = true
# character = "â”†"

[editor.soft-wrap]
enable = true

[keys.normal]
";" = "remove_primary_selection"
"ret" = ["open_below", "normal_mode"]
# "C-o" = "jump_forward"
# "C-i" = "jump_backward"

[keys.normal.space]
W = ":write"
q = ":quit"
C = ":buffer-close"
[keys.normal.space.space]
"r" = ":lsp-restart"
"f" = [":pipe find $(pwd) -maxdepth 1 | tail -n +2", "toggle_comments"]
# relative path (takes cwd of helix, but when using <g-f> to open file, takes cwd as the current opened file directory)
# ls -1 $(pwd)

[keys.normal."+"]
m = ":sh pwd >> $XDG_CONFIG_HOME/helix/projects"

[keys.normal."+"."s"]
# using zellij
# b = ":run-shell-command zellij run --floating --name \"stack build\" -- zsh -c \"stack build && echo Build successful!\""
# r = ":run-shell-command zellij run --floating --name \"stack run\" -- zsh -c \"stack run\""

# using kitty
b = ":run-shell-command kitty @ launch --title \"stack build\" --type window --cwd current --copy-env --hold zsh -c \"stack build && echo Build successful!\""
r = ":run-shell-command kitty @ launch --title \"stack run\" --type window --cwd current --copy-env --hold zsh -c \"stack run\""
t = ":run-shell-command kitty @ launch --title \"stack test\" --type window --cwd current --copy-env --hold zsh -c \"stack test\""
p = ":run-shell-command kitty @ launch --title \"stack bench\" --type window --cwd current --copy-env --hold zsh -c \"stack bench\""

# using wezterm
# b = ":run-shell-command wezterm cli split-pane -- zsh -c \"stack build && echo Build successful!; read -s -r -k1\""
# r = ":run-shell-command wezterm cli split-pane -- zsh -c \"stack run; read -s -r -k1\""

[keys.normal."+"."c"]
# using zellij
# b = ":run-shell-command zellij run --floating --name \"g++ main.cpp --std=c++20\" -- zsh -c \"g++ main.cpp --std=c++20 && echo Build successful!\""
# r = ":run-shell-command zellij run --floating --name \"g++ main.cpp --std=c++20 && ./a.out\" -- zsh -c \"g++ main.cpp --std=c++20 && ./a.out\""

# using kitty
# b = ":run-shell-command kitty @ launch --title \"g++ main.cpp --std=c++20\" --type window --cwd current --copy-env --hold zsh -c \"g++ main.cpp --std=c++20 && echo Build successful!\""
# r = ":run-shell-command kitty @ launch --title \"g++ main.cpp --std=c++20 && ./a.out\" --type window --cwd current --copy-env --hold zsh -c \"g++ main.cpp --std=c++20 && ./a.out\""

b = ":run-shell-command kitty @ launch --title \"make\" --type window --cwd current --copy-env --hold zsh -c \"make && echo Build successful!\""
r = ":run-shell-command kitty @ launch --title \"make run\" --type window --cwd current --copy-env --hold zsh -c \"make run\""



# b = ":run-shell-command wezterm cli split-pane -- zsh -c \"g++ main.cpp --std=c++20 && echo Build successful!; read -s -r -k1\""
# r = ":run-shell-command wezterm cli split-pane -- zsh -c \"g++ main.cpp --std=c++20 && ./a.out;read -s -r -k1\""

[keys.normal."+"."p"]
r = ":run-shell-command kitty @ launch --title \"python3\" --type window --cwd current --copy-env --hold zsh -c \"python3 main.py && echo Successful run!\""
