{
  "version": 3,
  "sources": ["../node_modules/jwt-decode/lib/atob.js", "../node_modules/jwt-decode/lib/base64_url_decode.js", "../node_modules/jwt-decode/lib/index.js", "../node_modules/jwt-decode/lib/index.cjs.js", "../src/create-google-spreadsheet.tsx", "../src/helpers/docs.ts", "../src/api/oauth.ts"],
  "sourcesContent": ["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;", "import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}", "\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}", "import jwtDecode, { InvalidTokenError } from \"./index\";\n\nconst wrapper = jwtDecode;\nwrapper.default = jwtDecode;\nwrapper.InvalidTokenError = InvalidTokenError;\nexport default wrapper;", "import { createDocFromUrl } from \"./helpers/docs\";\n\n// The command doesn't have a title argument because\n// Google doesn't seem to support this search query parameter\nexport default async function Command() {\n  await createDocFromUrl(\"spreadsheets\");\n}\n", "import { open } from \"@raycast/api\";\nimport { getEmail } from \"../api/oauth\";\n\nexport async function createDocFromUrl(prefix: string, title?: string) {\n  const email = await getEmail();\n\n  const baseUrl = `https://docs.google.com/${prefix}/create`;\n\n  const searchParams = new URLSearchParams();\n  if (title) {\n    searchParams.append(\"title\", title);\n  }\n  if (email) {\n    searchParams.append(\"authuser\", email);\n  }\n\n  const url = baseUrl + \"?\" + searchParams.toString();\n\n  await open(url);\n}\n", "import { OAuth } from \"@raycast/api\";\nimport jwt_decode from \"jwt-decode\";\nimport fetch from \"node-fetch\";\n\nconst clientId = \"859594387706-uunbhp90efuesm18epbs0pakuft1m1kt.apps.googleusercontent.com\";\n\nexport const client = new OAuth.PKCEClient({\n  redirectMethod: OAuth.RedirectMethod.AppURI,\n  providerName: \"Google\",\n  providerIcon: \"google-logo.png\",\n  providerId: \"google\",\n  description: \"Connect your Google account\",\n});\n\nexport async function authorize(): Promise<string> {\n  const tokenSet = await client.getTokens();\n  if (tokenSet?.accessToken) {\n    if (tokenSet.refreshToken && tokenSet.isExpired()) {\n      const tokens = await refreshTokens(tokenSet.refreshToken);\n      await client.setTokens(tokens);\n      return tokens.access_token;\n    }\n    return tokenSet.accessToken;\n  }\n\n  const authRequest = await client.authorizationRequest({\n    endpoint: \"https://accounts.google.com/o/oauth2/v2/auth\",\n    clientId,\n    scope:\n      \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/drive.readonly\",\n  });\n  const { authorizationCode } = await client.authorize(authRequest);\n\n  const tokens = await fetchTokens(authRequest, authorizationCode);\n  await client.setTokens(tokens);\n\n  return tokens.access_token;\n}\n\nasync function fetchTokens(authRequest: OAuth.AuthorizationRequest, authCode: string): Promise<OAuth.TokenResponse> {\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"code\", authCode);\n  params.append(\"verifier\", authRequest.codeVerifier);\n  params.append(\"grant_type\", \"authorization_code\");\n  params.append(\"redirect_uri\", authRequest.redirectURI);\n\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", { method: \"POST\", body: params });\n\n  if (!response.ok) {\n    console.error(\"fetch tokens error:\", await response.text());\n    throw new Error(response.statusText);\n  }\n\n  return (await response.json()) as OAuth.TokenResponse;\n}\n\nasync function refreshTokens(refreshToken: string): Promise<OAuth.TokenResponse> {\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"refresh_token\", refreshToken);\n  params.append(\"grant_type\", \"refresh_token\");\n\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", { method: \"POST\", body: params });\n\n  if (!response.ok) {\n    console.error(\"refresh tokens error:\", await response.text());\n    throw new Error(response.statusText);\n  }\n\n  const tokenResponse = (await response.json()) as OAuth.TokenResponse;\n  tokenResponse.refresh_token = tokenResponse.refresh_token ?? refreshToken;\n\n  return tokenResponse;\n}\n\nexport async function getEmail(): Promise<string | undefined> {\n  const tokenSet = await client.getTokens();\n\n  const idToken = tokenSet?.idToken;\n  if (!idToken) {\n    return;\n  }\n\n  const { email } = jwt_decode<{ email?: string }>(idToken);\n  return email;\n}\n"],
  "mappings": "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",
  "names": ["InvalidCharacterError", "message", "this", "prototype", "Error", "name", "r", "window", "atob", "bind", "input", "str", "String", "replace", "length", "bs", "buffer", "bc", "idx", "output", "charAt", "fromCharCode", "indexOf", "t", "decodeURIComponent", "m", "p", "code", "charCodeAt", "toString", "toUpperCase", "InvalidTokenError", "o", "token", "options", "pos", "header", "JSON", "parse", "base64_url_decode", "split", "e", "wrapper", "jwtDecode", "default", "create_google_spreadsheet_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "import_jwt_decode", "client", "getEmail", "idToken", "client", "email", "jwt_decode", "createDocFromUrl", "prefix", "title", "email", "getEmail", "baseUrl", "searchParams", "url", "Command", "createDocFromUrl"]
}
